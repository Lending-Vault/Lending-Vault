/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VaultManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "INTEREST_RATE"
      | "LIQUIDATION_PENALTY"
      | "LIQUIDATION_THRESHOLD"
      | "LTV_RATIO"
      | "acceptedCollateral"
      | "addCollateral"
      | "borrow"
      | "collateral"
      | "debt"
      | "deposit"
      | "getCollateralValue"
      | "getHealthFactor"
      | "lastInterestUpdate"
      | "liquidate"
      | "owner"
      | "priceOracle"
      | "repay"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrowed"
      | "CollateralDeposited"
      | "CollateralWithdrawn"
      | "Liquidated"
      | "Repaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LTV_RATIO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptedCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "debt",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralValue",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthFactor",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInterestUpdate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LTV_RATIO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInterestUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    user: AddressLike,
    collateralToken: AddressLike,
    borrowToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateralToken: string,
    borrowToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    collateralToken: string;
    borrowToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    user: AddressLike,
    collateralToken: AddressLike,
    debtToken: AddressLike,
    collateralSeized: BigNumberish,
    liquidatorReward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    collateralToken: string,
    debtToken: string,
    collateralSeized: bigint,
    liquidatorReward: bigint
  ];
  export interface OutputObject {
    user: string;
    collateralToken: string;
    debtToken: string;
    collateralSeized: bigint;
    liquidatorReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultManager extends BaseContract {
  connect(runner?: ContractRunner | null): VaultManager;
  waitForDeployment(): Promise<this>;

  interface: VaultManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  INTEREST_RATE: TypedContractMethod<[], [bigint], "view">;

  LIQUIDATION_PENALTY: TypedContractMethod<[], [bigint], "view">;

  LIQUIDATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  LTV_RATIO: TypedContractMethod<[], [bigint], "view">;

  acceptedCollateral: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  addCollateral: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      collateralToken: AddressLike,
      borrowToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  collateral: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  debt: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCollateralValue: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getHealthFactor: TypedContractMethod<
    [user: AddressLike, collateralToken: AddressLike, debtToken: AddressLike],
    [bigint],
    "view"
  >;

  lastInterestUpdate: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  liquidate: TypedContractMethod<
    [user: AddressLike, collateralToken: AddressLike, debtToken: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  repay: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INTEREST_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LIQUIDATION_PENALTY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LIQUIDATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LTV_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptedCollateral"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "addCollateral"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      collateralToken: AddressLike,
      borrowToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateral"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "debt"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCollateralValue"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHealthFactor"
  ): TypedContractMethod<
    [user: AddressLike, collateralToken: AddressLike, debtToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastInterestUpdate"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [user: AddressLike, collateralToken: AddressLike, debtToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralWithdrawn"
  ): TypedContractEvent<
    CollateralWithdrawnEvent.InputTuple,
    CollateralWithdrawnEvent.OutputTuple,
    CollateralWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;

  filters: {
    "Borrowed(address,address,address,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "CollateralDeposited(address,address,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "CollateralWithdrawn(address,address,uint256)": TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;
    CollateralWithdrawn: TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;

    "Liquidated(address,address,address,uint256,uint256)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "Repaid(address,address,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
  };
}
