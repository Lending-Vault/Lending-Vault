/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SavingsVault {
  export type SavingsPositionStruct = {
    positionId: BigNumberish;
    stablecoin: AddressLike;
    principal: BigNumberish;
    depositTime: BigNumberish;
    lockEndTime: BigNumberish;
    lockPeriod: BigNumberish;
    withdrawn: boolean;
    stablecoinInterest: BigNumberish;
    gftReward: BigNumberish;
  };

  export type SavingsPositionStructOutput = [
    positionId: bigint,
    stablecoin: string,
    principal: bigint,
    depositTime: bigint,
    lockEndTime: bigint,
    lockPeriod: bigint,
    withdrawn: boolean,
    stablecoinInterest: bigint,
    gftReward: bigint
  ] & {
    positionId: bigint;
    stablecoin: string;
    principal: bigint;
    depositTime: bigint;
    lockEndTime: bigint;
    lockPeriod: bigint;
    withdrawn: boolean;
    stablecoinInterest: bigint;
    gftReward: bigint;
  };
}

export interface SavingsVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ANNUAL_INTEREST_RATE"
      | "ANNUAL_PERIOD"
      | "BASIS_POINTS"
      | "QUARTERLY_PERIOD"
      | "SEMI_ANNUAL_PERIOD"
      | "addStablecoin"
      | "annualGftReward"
      | "deposit"
      | "earlyWithdrawalPenalty"
      | "emergencyWithdraw"
      | "getProtocolStats"
      | "getTotalValueLocked"
      | "getUserActivePositionsCount"
      | "getUserPositions"
      | "gftToken"
      | "minimumDeposit"
      | "owner"
      | "pause"
      | "paused"
      | "protocolTreasury"
      | "quarterlyGftReward"
      | "removeStablecoin"
      | "renounceOwnership"
      | "semiAnnualGftReward"
      | "setProtocolTreasury"
      | "supportedStablecoins"
      | "totalPositions"
      | "totalSavings"
      | "totalUsers"
      | "transferOwnership"
      | "unpause"
      | "updateEarlyWithdrawalPenalty"
      | "updateGftRewards"
      | "userPositions"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposited"
      | "EarlyWithdrawalPenaltyUpdated"
      | "GftRewardsUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "StablecoinAdded"
      | "StablecoinRemoved"
      | "Unpaused"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ANNUAL_INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ANNUAL_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUARTERLY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEMI_ANNUAL_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStablecoin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "annualGftReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyWithdrawalPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserActivePositionsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gftToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quarterlyGftReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStablecoin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "semiAnnualGftReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedStablecoins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSavings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateEarlyWithdrawalPenalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGftRewards",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ANNUAL_INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ANNUAL_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUARTERLY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEMI_ANNUAL_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "annualGftReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyWithdrawalPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserActivePositionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gftToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quarterlyGftReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "semiAnnualGftReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedStablecoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSavings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEarlyWithdrawalPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGftRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    positionId: BigNumberish,
    stablecoin: AddressLike,
    amount: BigNumberish,
    lockPeriod: BigNumberish,
    lockEndTime: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    positionId: bigint,
    stablecoin: string,
    amount: bigint,
    lockPeriod: bigint,
    lockEndTime: bigint
  ];
  export interface OutputObject {
    user: string;
    positionId: bigint;
    stablecoin: string;
    amount: bigint;
    lockPeriod: bigint;
    lockEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EarlyWithdrawalPenaltyUpdatedEvent {
  export type InputTuple = [newPenalty: BigNumberish];
  export type OutputTuple = [newPenalty: bigint];
  export interface OutputObject {
    newPenalty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GftRewardsUpdatedEvent {
  export type InputTuple = [
    quarterly: BigNumberish,
    semiAnnual: BigNumberish,
    annual: BigNumberish
  ];
  export type OutputTuple = [
    quarterly: bigint,
    semiAnnual: bigint,
    annual: bigint
  ];
  export interface OutputObject {
    quarterly: bigint;
    semiAnnual: bigint;
    annual: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StablecoinAddedEvent {
  export type InputTuple = [stablecoin: AddressLike];
  export type OutputTuple = [stablecoin: string];
  export interface OutputObject {
    stablecoin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StablecoinRemovedEvent {
  export type InputTuple = [stablecoin: AddressLike];
  export type OutputTuple = [stablecoin: string];
  export interface OutputObject {
    stablecoin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    positionId: BigNumberish,
    principal: BigNumberish,
    stablecoinInterest: BigNumberish,
    gftReward: BigNumberish,
    isEarlyWithdrawal: boolean
  ];
  export type OutputTuple = [
    user: string,
    positionId: bigint,
    principal: bigint,
    stablecoinInterest: bigint,
    gftReward: bigint,
    isEarlyWithdrawal: boolean
  ];
  export interface OutputObject {
    user: string;
    positionId: bigint;
    principal: bigint;
    stablecoinInterest: bigint;
    gftReward: bigint;
    isEarlyWithdrawal: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SavingsVault extends BaseContract {
  connect(runner?: ContractRunner | null): SavingsVault;
  waitForDeployment(): Promise<this>;

  interface: SavingsVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ANNUAL_INTEREST_RATE: TypedContractMethod<[], [bigint], "view">;

  ANNUAL_PERIOD: TypedContractMethod<[], [bigint], "view">;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  QUARTERLY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  SEMI_ANNUAL_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addStablecoin: TypedContractMethod<
    [stablecoin: AddressLike],
    [void],
    "nonpayable"
  >;

  annualGftReward: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [stablecoin: AddressLike, amount: BigNumberish, lockPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  earlyWithdrawalPenalty: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<
    [user: AddressLike, positionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProtocolStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        users: bigint;
        positions: bigint;
        activePositions: bigint;
      }
    ],
    "view"
  >;

  getTotalValueLocked: TypedContractMethod<
    [stablecoin: AddressLike],
    [bigint],
    "view"
  >;

  getUserActivePositionsCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserPositions: TypedContractMethod<
    [user: AddressLike],
    [SavingsVault.SavingsPositionStructOutput[]],
    "view"
  >;

  gftToken: TypedContractMethod<[], [string], "view">;

  minimumDeposit: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  protocolTreasury: TypedContractMethod<[], [string], "view">;

  quarterlyGftReward: TypedContractMethod<[], [bigint], "view">;

  removeStablecoin: TypedContractMethod<
    [stablecoin: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  semiAnnualGftReward: TypedContractMethod<[], [bigint], "view">;

  setProtocolTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  supportedStablecoins: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  totalPositions: TypedContractMethod<[], [bigint], "view">;

  totalSavings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateEarlyWithdrawalPenalty: TypedContractMethod<
    [_penalty: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateGftRewards: TypedContractMethod<
    [
      _quarterly: BigNumberish,
      _semiAnnual: BigNumberish,
      _annual: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userPositions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        positionId: bigint;
        stablecoin: string;
        principal: bigint;
        depositTime: bigint;
        lockEndTime: bigint;
        lockPeriod: bigint;
        withdrawn: boolean;
        stablecoinInterest: bigint;
        gftReward: bigint;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<
    [positionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ANNUAL_INTEREST_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ANNUAL_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUARTERLY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SEMI_ANNUAL_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addStablecoin"
  ): TypedContractMethod<[stablecoin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "annualGftReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [stablecoin: AddressLike, amount: BigNumberish, lockPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earlyWithdrawalPenalty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [user: AddressLike, positionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProtocolStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        users: bigint;
        positions: bigint;
        activePositions: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalValueLocked"
  ): TypedContractMethod<[stablecoin: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserActivePositionsCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPositions"
  ): TypedContractMethod<
    [user: AddressLike],
    [SavingsVault.SavingsPositionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "gftToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minimumDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quarterlyGftReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeStablecoin"
  ): TypedContractMethod<[stablecoin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "semiAnnualGftReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setProtocolTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedStablecoins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalPositions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSavings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEarlyWithdrawalPenalty"
  ): TypedContractMethod<[_penalty: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGftRewards"
  ): TypedContractMethod<
    [
      _quarterly: BigNumberish,
      _semiAnnual: BigNumberish,
      _annual: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userPositions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        positionId: bigint;
        stablecoin: string;
        principal: bigint;
        depositTime: bigint;
        lockEndTime: bigint;
        lockPeriod: bigint;
        withdrawn: boolean;
        stablecoinInterest: bigint;
        gftReward: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[positionIndex: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "EarlyWithdrawalPenaltyUpdated"
  ): TypedContractEvent<
    EarlyWithdrawalPenaltyUpdatedEvent.InputTuple,
    EarlyWithdrawalPenaltyUpdatedEvent.OutputTuple,
    EarlyWithdrawalPenaltyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GftRewardsUpdated"
  ): TypedContractEvent<
    GftRewardsUpdatedEvent.InputTuple,
    GftRewardsUpdatedEvent.OutputTuple,
    GftRewardsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "StablecoinAdded"
  ): TypedContractEvent<
    StablecoinAddedEvent.InputTuple,
    StablecoinAddedEvent.OutputTuple,
    StablecoinAddedEvent.OutputObject
  >;
  getEvent(
    key: "StablecoinRemoved"
  ): TypedContractEvent<
    StablecoinRemovedEvent.InputTuple,
    StablecoinRemovedEvent.OutputTuple,
    StablecoinRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Deposited(address,uint256,address,uint256,uint8,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "EarlyWithdrawalPenaltyUpdated(uint256)": TypedContractEvent<
      EarlyWithdrawalPenaltyUpdatedEvent.InputTuple,
      EarlyWithdrawalPenaltyUpdatedEvent.OutputTuple,
      EarlyWithdrawalPenaltyUpdatedEvent.OutputObject
    >;
    EarlyWithdrawalPenaltyUpdated: TypedContractEvent<
      EarlyWithdrawalPenaltyUpdatedEvent.InputTuple,
      EarlyWithdrawalPenaltyUpdatedEvent.OutputTuple,
      EarlyWithdrawalPenaltyUpdatedEvent.OutputObject
    >;

    "GftRewardsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      GftRewardsUpdatedEvent.InputTuple,
      GftRewardsUpdatedEvent.OutputTuple,
      GftRewardsUpdatedEvent.OutputObject
    >;
    GftRewardsUpdated: TypedContractEvent<
      GftRewardsUpdatedEvent.InputTuple,
      GftRewardsUpdatedEvent.OutputTuple,
      GftRewardsUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "StablecoinAdded(address)": TypedContractEvent<
      StablecoinAddedEvent.InputTuple,
      StablecoinAddedEvent.OutputTuple,
      StablecoinAddedEvent.OutputObject
    >;
    StablecoinAdded: TypedContractEvent<
      StablecoinAddedEvent.InputTuple,
      StablecoinAddedEvent.OutputTuple,
      StablecoinAddedEvent.OutputObject
    >;

    "StablecoinRemoved(address)": TypedContractEvent<
      StablecoinRemovedEvent.InputTuple,
      StablecoinRemovedEvent.OutputTuple,
      StablecoinRemovedEvent.OutputObject
    >;
    StablecoinRemoved: TypedContractEvent<
      StablecoinRemovedEvent.InputTuple,
      StablecoinRemovedEvent.OutputTuple,
      StablecoinRemovedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
