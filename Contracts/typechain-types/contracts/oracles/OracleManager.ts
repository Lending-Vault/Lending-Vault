/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface OracleManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS"
      | "MAX_PRICE_DEVIATION"
      | "getPrice"
      | "getValidatedPrice"
      | "manualOracle"
      | "owner"
      | "primaryOracle"
      | "renounceOwnership"
      | "secondaryOracle"
      | "setManualOracle"
      | "setPrimaryOracle"
      | "setSecondaryOracle"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ManualOracleSet"
      | "OwnershipTransferred"
      | "PriceRetrieved"
      | "PrimaryOracleSet"
      | "SecondaryOracleSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DEVIATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatedPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manualOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "primaryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setManualOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DEVIATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValidatedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primaryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManualOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ManualOracleSetEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceRetrievedEvent {
  export type InputTuple = [
    token: AddressLike,
    price: BigNumberish,
    oracleUsed: BigNumberish
  ];
  export type OutputTuple = [token: string, price: bigint, oracleUsed: bigint];
  export interface OutputObject {
    token: string;
    price: bigint;
    oracleUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimaryOracleSetEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecondaryOracleSetEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OracleManager extends BaseContract {
  connect(runner?: ContractRunner | null): OracleManager;
  waitForDeployment(): Promise<this>;

  interface: OracleManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  MAX_PRICE_DEVIATION: TypedContractMethod<[], [bigint], "view">;

  getPrice: TypedContractMethod<[token: AddressLike], [bigint], "nonpayable">;

  getValidatedPrice: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  manualOracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  primaryOracle: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  secondaryOracle: TypedContractMethod<[], [string], "view">;

  setManualOracle: TypedContractMethod<
    [oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setPrimaryOracle: TypedContractMethod<
    [oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setSecondaryOracle: TypedContractMethod<
    [oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PRICE_DEVIATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getValidatedPrice"
  ): TypedContractMethod<[token: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "manualOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primaryOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "secondaryOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setManualOracle"
  ): TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrimaryOracle"
  ): TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSecondaryOracle"
  ): TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ManualOracleSet"
  ): TypedContractEvent<
    ManualOracleSetEvent.InputTuple,
    ManualOracleSetEvent.OutputTuple,
    ManualOracleSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceRetrieved"
  ): TypedContractEvent<
    PriceRetrievedEvent.InputTuple,
    PriceRetrievedEvent.OutputTuple,
    PriceRetrievedEvent.OutputObject
  >;
  getEvent(
    key: "PrimaryOracleSet"
  ): TypedContractEvent<
    PrimaryOracleSetEvent.InputTuple,
    PrimaryOracleSetEvent.OutputTuple,
    PrimaryOracleSetEvent.OutputObject
  >;
  getEvent(
    key: "SecondaryOracleSet"
  ): TypedContractEvent<
    SecondaryOracleSetEvent.InputTuple,
    SecondaryOracleSetEvent.OutputTuple,
    SecondaryOracleSetEvent.OutputObject
  >;

  filters: {
    "ManualOracleSet(address)": TypedContractEvent<
      ManualOracleSetEvent.InputTuple,
      ManualOracleSetEvent.OutputTuple,
      ManualOracleSetEvent.OutputObject
    >;
    ManualOracleSet: TypedContractEvent<
      ManualOracleSetEvent.InputTuple,
      ManualOracleSetEvent.OutputTuple,
      ManualOracleSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceRetrieved(address,uint256,uint8)": TypedContractEvent<
      PriceRetrievedEvent.InputTuple,
      PriceRetrievedEvent.OutputTuple,
      PriceRetrievedEvent.OutputObject
    >;
    PriceRetrieved: TypedContractEvent<
      PriceRetrievedEvent.InputTuple,
      PriceRetrievedEvent.OutputTuple,
      PriceRetrievedEvent.OutputObject
    >;

    "PrimaryOracleSet(address)": TypedContractEvent<
      PrimaryOracleSetEvent.InputTuple,
      PrimaryOracleSetEvent.OutputTuple,
      PrimaryOracleSetEvent.OutputObject
    >;
    PrimaryOracleSet: TypedContractEvent<
      PrimaryOracleSetEvent.InputTuple,
      PrimaryOracleSetEvent.OutputTuple,
      PrimaryOracleSetEvent.OutputObject
    >;

    "SecondaryOracleSet(address)": TypedContractEvent<
      SecondaryOracleSetEvent.InputTuple,
      SecondaryOracleSetEvent.OutputTuple,
      SecondaryOracleSetEvent.OutputObject
    >;
    SecondaryOracleSet: TypedContractEvent<
      SecondaryOracleSetEvent.InputTuple,
      SecondaryOracleSetEvent.OutputTuple,
      SecondaryOracleSetEvent.OutputObject
    >;
  };
}
