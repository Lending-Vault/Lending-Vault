/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RedStoneOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRICE_STALENESS_THRESHOLD"
      | "addTokenDataFeed"
      | "authorizeUpdater"
      | "authorizedUpdaters"
      | "getPrice"
      | "getPriceStalenessThreshold"
      | "hasPrice"
      | "owner"
      | "renounceOwnership"
      | "revokeUpdater"
      | "tokenToDataFeedId"
      | "transferOwnership"
      | "updatePrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataFeedAdded"
      | "OwnershipTransferred"
      | "PriceUpdated"
      | "UpdaterAuthorized"
      | "UpdaterRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PRICE_STALENESS_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenDataFeed",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUpdaters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceStalenessThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToDataFeedId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PRICE_STALENESS_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenDataFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUpdaters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceStalenessThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToDataFeedId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
}

export namespace DataFeedAddedEvent {
  export type InputTuple = [token: AddressLike, dataFeedId: BytesLike];
  export type OutputTuple = [token: string, dataFeedId: string];
  export interface OutputObject {
    token: string;
    dataFeedId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [token: string, price: bigint, timestamp: bigint];
  export interface OutputObject {
    token: string;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdaterAuthorizedEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdaterRevokedEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RedStoneOracle extends BaseContract {
  connect(runner?: ContractRunner | null): RedStoneOracle;
  waitForDeployment(): Promise<this>;

  interface: RedStoneOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRICE_STALENESS_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  addTokenDataFeed: TypedContractMethod<
    [token: AddressLike, dataFeedId: BytesLike],
    [void],
    "nonpayable"
  >;

  authorizeUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedUpdaters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getPrice: TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;

  getPriceStalenessThreshold: TypedContractMethod<[], [bigint], "view">;

  hasPrice: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenToDataFeedId: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<
    [token: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRICE_STALENESS_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addTokenDataFeed"
  ): TypedContractMethod<
    [token: AddressLike, dataFeedId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedUpdaters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceStalenessThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPrice"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenToDataFeedId"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [token: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DataFeedAdded"
  ): TypedContractEvent<
    DataFeedAddedEvent.InputTuple,
    DataFeedAddedEvent.OutputTuple,
    DataFeedAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdaterAuthorized"
  ): TypedContractEvent<
    UpdaterAuthorizedEvent.InputTuple,
    UpdaterAuthorizedEvent.OutputTuple,
    UpdaterAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "UpdaterRevoked"
  ): TypedContractEvent<
    UpdaterRevokedEvent.InputTuple,
    UpdaterRevokedEvent.OutputTuple,
    UpdaterRevokedEvent.OutputObject
  >;

  filters: {
    "DataFeedAdded(address,bytes32)": TypedContractEvent<
      DataFeedAddedEvent.InputTuple,
      DataFeedAddedEvent.OutputTuple,
      DataFeedAddedEvent.OutputObject
    >;
    DataFeedAdded: TypedContractEvent<
      DataFeedAddedEvent.InputTuple,
      DataFeedAddedEvent.OutputTuple,
      DataFeedAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(address,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "UpdaterAuthorized(address)": TypedContractEvent<
      UpdaterAuthorizedEvent.InputTuple,
      UpdaterAuthorizedEvent.OutputTuple,
      UpdaterAuthorizedEvent.OutputObject
    >;
    UpdaterAuthorized: TypedContractEvent<
      UpdaterAuthorizedEvent.InputTuple,
      UpdaterAuthorizedEvent.OutputTuple,
      UpdaterAuthorizedEvent.OutputObject
    >;

    "UpdaterRevoked(address)": TypedContractEvent<
      UpdaterRevokedEvent.InputTuple,
      UpdaterRevokedEvent.OutputTuple,
      UpdaterRevokedEvent.OutputObject
    >;
    UpdaterRevoked: TypedContractEvent<
      UpdaterRevokedEvent.InputTuple,
      UpdaterRevokedEvent.OutputTuple,
      UpdaterRevokedEvent.OutputObject
    >;
  };
}
